const axios = require('axios');

const data = [
    "8938548776328",
    "8938525657664",
    "8936195690967",
    "8936195692282",
    "8936195691025",
    "8938551793466",
    "8936195691483",
    "8938507866305",
    "8938507866312",
    "8936195693968",
    "8936195693951",
    "8936195696075",
    "8936195693944",
    "8936195693975",
    "8936098161410",
    "8936195694224",
    "8936195694231",
    "8936195694217",
    "8938514075905",
    "8936195696082",
    "8938531218385",
    "8938541907323",
    "8938515374335",
    "8938515374342",
    "8938515374311",
    "8936098161212",
    "8936098161229",
    "8936098161168",
    "8936098161083",
    "8936144654354",
    "8936098160963",
    "8936098161243",
    "8936098161120",
    "8936098160833",
    "8936098162806",
    "8938523197223",
    "8936098162790",
    "8936098160161",
    "8936098162028",
    "8936098162165",
    "8936200090102",
    "8936098160628",
    "8936007200377",
    "8936098160611",
    "8936098160024",
    "8936072320031",
    "8936072320024",
    "8936201161504",
    "8809232900995",
    "8936201161498",
    "8809232901008",
    "8938515374359",
    "8938515374366",
    "8935049019961",
    "8935049019954",
    "8938515374298",
    "8935049019336",
    "8938515374304",
    "8938515374328",
    "8935049019343",
    "18935049019333",
    "18935049019968",
    "18935049019951",
    "18935049019340",
    "8938515374373",
    "8936098950069",
    "8936098160901",
    "18938541565209",
    "18938541565186",
    "8936098161458",
    "8936098161533",
    "8936095371065",
    "8936098162080",
    "8936098161137",
    "8936098161090",
    "8936098161601",
    "8936098161205",
    "8936172701259",
    "8936102591608",
    "8936144651339",
    "8936098161618",
    "8936098160666",
    "8936200090119",
    "8936098162110",
    "8938547157760",
    "8936098160857",
    "8938533189614",
    "8938532908353",
    "8936200995377",
    "8936098161304",
    "8936144653357",
    "8936098162011",
    "8936098160888",
    "8936098160994",
    "8936098160956",
    "18938541565193",
    "8936098160987",
    "8936098161526",
    "8938507866831",
    "8938507866725",
    "8936205270998",
    "8936172813983",
    "8938527413701",
    "8936098162134",
    "8936098161342",
    "8936098161182",
    "8936098162158",
    "8936098162127",
    "8936098160819",
    "8936098162004",
    "8936098161625",
    "8936098162141",
    "8936102591684",
    "8938507866770",
    "8936098162288",
    "8936201161467",
    "8936201161474",
    "8806129219307",
    "8936201161481",
    "8938540990043",
    "18938541565162",
    "8936098160734",
    "18938541565155",
    "8936098161106",
    "8936098161151",
    "8936144655573",
    "8936098161687",
    "8936098161663",
    "7804644602346",
    "8936207447992",
    "8938540106109",
    "8938537837481",
    "8936144657874",
    "8936144651445",
    "8936144653104",
    "8936144659052",
    "8938527378901",
    "3760217676302",
    "8936207447152",
    "8938547157784",
    "8936098160949",
    "8936098162783",
    "8936098162516",
    "8936098161007",
    "8938527420952",
    "8938537837498",
    "3760217676265",
    "8936209083013",
    "3142869000214",
    "8936098162103",
    "8938542383065",
    "8936098160437",
    "8936139778188",
    "8936144653296",
    "3142869000177",
    "8936102591691",
    "8936144650547",
    "8936144657935",
    "3142869000269",
    "8936098161069",
    "8936098161632",
    "8936144657706",
    "8936098162196",
    "8936102591707",
    "8938540355019",
    "8938540355002",
    "8936028040419",
    "8936028044455",
    "8936194789433",
    "8938515367528",
    "8935277801208",
    "8938517071126",
    "8936128650440",
    "8936128650433",
    "8938541090131",
    "8936106012642",
    "8936106012635",
    "8938507587088",
    "8936116500238",
    "8938500094415",
    "8938508778041",
    "8936128640434",
    "8936128640441",
    "8938541090124",
    "8938507866992",
    "8936098162455",
    "8936098162578",
    "8936144655726",
    "3760217676272",
    "8936098160314",
    "8936208461812",
    "7804439000302",
    "8936144659076",
    "8936144653777",
    "8938541565387",
    "8938541565370",
    "8936144654767",
    "8936172814065",
    "8936209083020",
    "8938507866718",
    "3142869000245",
    "8936144659380",
    "8938554290092",
    "8936098160277",
    "8936213950585",
    "8936098160260",
    "8936098161878",
    "8936098160154",
    "8936098161991",
    "8936213950035",
    "8936144658499",
    "8936144656914",
    "8936098161953",
    "8936209082962",
    "8936144651834",
    "8938545639022",
    "8936098161984",
    "8936221860401",
    "8936111879193",
    "8936206930358",
    "8936098161977",
    "8936144650660",
    "8936098160222",
    "8936098160215",
    "8936213950592",
    "8936098160307",
    "8936144650325",
    "8936144653760",
    "8938541615068",
    "8938542383003",
    "7804439000456",
    "8938540355101",
    "8936098161960",
    "8936098161861",
    "8938542383010",
    "8936098162189",
    "8938547942175",
    "8938541615129",
    "8938529137025",
    "8938533189676",
    "8936144654118",
    "8938542383027",
    "8936098161854",
    "7804439000388",
    "7804439000463",
    "8936098162318",
    "7804439000418",
    "8936098160376",
    "8936098162592",
    "8936209083570",
    "8936098160369",
    "3142869000153",
    "8936208461409",
    "8936208461560",
    "8936208461577",
    "8936144652329",
    "8936144657881",
    "8936142672244",
    "8936144652961",
    "8936142672251",
    "8938533869400",
    "8936208461829",
    "8936208462161",
    "3142869000160",
    "8936098161847",
    "8936213950318",
    "8936213950394",
    "3760217676296",
    "8936098161892",
    "8936208461348",
    "8936098160246",
    "8936194782199",
    "8936221861194",
    "8936098162042",
    "8936209083099",
    "8936098160253",
    "8936098162059",
    "8936221861118",
    "3142869000283",
    "8936098161359",
    "8936213950936",
    "8936098161380",
    "8938542383119",
    "8936209082504",
    "8936205270981",
    "3760217676289",
    "8936221860968",
    "8936098160383",
    "7804439000364",
    "7804439000425",
    "8936206930341",
    "3142869000276",
    "8936098160178",
    "3142869000146",
    "8936098162264",
    "8936209083204",
    "8936098162233",
    "8936098160031",
    "8938548719035",
    "8936221860463",
    "8936221861187",
    "8936098160239",
    "8936098161885",
    "8936213950325",
    "8936213950400",
    "3142869000139",
    "8936139778454",
    "8936098160185",
    "8938533362543",
    "8936078800674",
    "8936012980257",
    "8936012980271",
    "8936100720703",
    "8938541090155",
    "8938541090209",
    "8936074900392",
    "8936195320239",
    "8936149898999",
    "8938548742019",
    "8936211700144",
    "8938538107156",
    "8938546343225",
    "8938521988526",
    "8936101741257",
    "8936218300446",
    "8938541907170",
    "8938541907972",
    "8938513274163",
    "8936129830421",
    "8936139777181",
    "8936139777174",
    "8936139777198",
    "8936149899019",
    "8938510459464",
    "8936101742223",
    "8938535856866",
    "8938508778423",
    "8938508778157",
    "8938508778638",
    "8938521988175",
    "8936101742247",
    "8936191041428",
    "8938541129169",
    "8938543714479",
    "8938540088153",
    "8936101670786",
    "8936101672421",
    "8936101675415",
    "8938541565196",
    "7804439000371",
    "8099999747395",
    "8099999747371",
    "8938541565189",
    "8936208461492",
    "8936213950080",
    "8938541565165",
    "8938541565202",
    "8938533869172",
    "8099999747401",
    "8936208461263",
    "8936213950752",
    "8936208460716",
    "8938541565349",
    "8938541565332",
    "8936209082719",
    "8938541565172",
    "8938541565158",
    "8936209082726",
    "8936208461188",
    "8936213950097",
    "8099999747388",
    "8936191355259",
    "8936209082511",
    "8936213950929",
    "8936212120378",
    "8936213950486",
    "3142869000207",
    "8936212120385",
    "8936139770908",
    "8936139771288",
    "8936139778669",
    "8936139778973",
    "8936213950691",
    "7804439000401",
    "7804439000449",
    "8936194789488",
    "8936139773343",
    "8936098162226",
    "8936170702036",
    "8936221860975",
    "7804439000395",
    "7804439000432",
    "8938529137063",
    "8936221861125",
    "8938529137032",
    "3142869000191",
    "8936139770946",
    "8936221860609",
    "8936209083587",
    "8054242364521",
    "8938543614052",
    "8936101981301",
    "8936219580212",
    "8936201991606",
    "8934637515472",
    "8938514355373",
    "8938514355397",
    "8938514355366",
    "8938514355380",
    "8936012980240",
    "8936012980714",
    "8938508191062",
    "8938508778355",
    "8936111440256",
    "8938522552191",
    "8938522552375",
    "8936102290181",
    "8936111440270",
    "8936111440249",
    "8936152692058",
    "8938535630091",
    "8938519788336",
    "8938527929219",
    "8938528013252",
    "8938510575997",
    "8938528013184",
    "8938520753262",
    "8936103830300",
    "8934637515458",
    "8936012980424",
    "8938542273113",
    "8938533649392",
    "8938521988120",
    "8938521988113",
    "8936143730615",
    "8938538107200",
    "8938538107194",
    "8938538107040",
    "8938538107057",
    "8938538107101",
    "8938521988069",
    "8938521988106",
    "8936172640961",
    "8938521988212",
    "8938508005246",
    "8938529713168",
    "8938542273083",
    "8938544497876",
    "8936074900354",
    "8938536596273"
]

// Default auth token
const defaultAuthToken = '335cdee8-f30e-400b-af63-613fda13d462';

// Function to prompt the user for input using process.stdin (no external libraries)
function prompt(question) {
    return new Promise(resolve => {
        process.stdout.write(question);
        process.stdin.once('data', data => resolve(data.toString().trim()));
    });
}

// Function to get authToken, using default if not provided by the user
async function getAuthToken() {
    const inputToken = await prompt('Please enter your authToken (or press Enter to use default): ');
    return inputToken || defaultAuthToken; // Use default if no input provided
}

async function startScan(authToken) {
    let isLoading = true;
    console.log('Loading...', isLoading);

    const request = axios.create({
        headers: {
            "Authorization": 'Bearer ' + authToken,
            "Host": "api-social.icheck.com.vn",
            "lon": "105.83881873307597",
            "Accept": "*/*",
            "device-id": "702161682e4cb512e1af441a850c57ac",
            "appVersion": "6.85.0",
            "Accept-Language": "en-GB,en;q=0.9",
            "lat": "20.99175374941804",
            "platform": "ios",
            "Accept-Encoding": "gzip, deflate, br",
            "User-Agent": "ios/vn.icheck.ios/6.85.0(241211.1) iPhone/iOS 17.2.1",
            "Connection": "keep-alive",
            "Content-Type": "application/json"
        },
        baseURL: 'https://api-social.icheck.com.vn/social/api/',
    });

    try {
        // Fetch history
        const { data: history } = await request.post('history-action/scan/query', {
            "offshopId": [],
            "limit": 10,
            "sort": 2,
            "offset": 0,
            "actionType": []
        });

        const lastBar = history?.data?.rows?.[0]?.product?.barcode;
        const lastIndex = data.indexOf(lastBar);

        let historyLength = history?.data?.rows?.length || 0;
        console.log(`History length: ${historyLength}`);

        // Start scanning from the last scanned barcode in history
        for (let i = lastIndex + 1; i < data.length; i++) {
            await request.post('products/scan', {
                "barcodeType": "ean13",
                "layout": "product-detail",
                "phone": "84359530143",
                "isScan": true,
                "barcode": data[i]
            });
            console.log(`Scanned barcode: ${data[i]}`);
            await sleep(getRandomNumber(6500, 14000)); // Random delay between scans
        }
    } catch (error) {
        console.error('Error during scan:', error);
    } finally {
        isLoading = false;
        console.log('Loading finished', isLoading);
    }
}

// Function to fetch scan history every 60 seconds
const fetchScanHistory = async (authToken) => {
    console.log("Fetching scan history...");

    const request = axios.create({
        headers: {
            "Authorization": 'Bearer ' + authToken,
            "Host": "api-social.icheck.com.vn",
            "lon": "105.83881873307597",
            "Accept": "*/*",
            "device-id": "702161682e4cb512e1af441a850c57ac",
            "appVersion": "6.85.0",
            "Accept-Language": "en-GB,en;q=0.9",
            "lat": "20.99175374941804",
            "platform": "ios",
            "Accept-Encoding": "gzip, deflate, br",
            "User-Agent": "ios/vn.icheck.ios/6.85.0(241211.1) iPhone/iOS 17.2.1",
            "Connection": "keep-alive",
            "Content-Type": "application/json"
        },
        baseURL: 'https://api-social.icheck.com.vn/social/api/',
    });

    try {
        const { data: history } = await request.post('history-action/scan/query', {
            "offshopId": [],
            "limit": 10,
            "sort": 2,
            "offset": 0,
            "actionType": []
        });

        const lastBar = history?.data?.rows?.[0]?.product?.barcode;
        console.log("Last scanned barcode:", lastBar);
    } catch (error) {
        console.error("Error while fetching scan history:", error);
    }
};

// Sleep function to add delay between scans
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Random number generator for delays
function getRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Main execution
async function main() {
    const authToken = await getAuthToken(); // Get authToken either from user input or default
    startScan(authToken); // Start scanning

    // Fetch scan history every 60 seconds
    setInterval(() => fetchScanHistory(authToken), 60000);
}

main(); // Run the main function
